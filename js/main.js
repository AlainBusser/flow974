// Generated by CoffeeScript 2.2.3
var _createFieldControl, canSave, compile, componentInput, componentModule, componentNum, componentOutput, components, container, delay, editor, engine, header, menu, moduleManager, moduleStackEditor, modulename, numSocket, openModule, saveModule;

delay = function(ms, func) {
  return setTimeout(func, ms);
};

moduleManager = new D3NE.ModuleManager(['Input'], ['Output']);

_createFieldControl = function(type, value, key, placeholder = '') {
  return new D3NE.Control(`<input type=${type} value=${value} placeholder=${placeholder}>`, (el, c) => {
    var upd;
    upd = function() {
      if (type === 'number') {
        c.putData(key, parseFloat(el.value) || 0);
      } else {
        c.putData(key, el.value);
      }
      return editor.eventListener.trigger('change');
    };
    el.addEventListener('input', upd);
    el.addEventListener('mousedown', function(e) {
      return e.stopPropagation();
    });
    el.addEventListener('contextmenu', function(e) {
      return e.stopPropagation();
    });
    // prevent node movement when selecting text in the input field
    // prevent custom context menu
    return upd();
  });
};

numSocket = new D3NE.Socket('number', 'Number value', 'hint');

componentModule = new D3NE.Component('Module', {
  builder: function(node) {
    var ctrl;
    if (!node.data.module) {
      node.data.module = {
        name: 'module',
        data: {
          id: editor.id,
          nodes: {}
        }
      };
    }
    moduleManager.getInputs(node.data.module.data).forEach((i) => {
      if (i.title === 'Input') {
        return node.addInput(new D3NE.Input(i.name, numSocket));
      }
    });
    /// else for another socket
    moduleManager.getOutputs(node.data.module.data).forEach((o) => {
      console.log(o.name, numSocket);
      return node.addOutput(new D3NE.Output(o.name, numSocket));
    });
    ctrl = new D3NE.Control("<div class='module-control'><input readonly type='text'><button>Edit</button></div>", (el, c) => {
      el.querySelector('input').value = node.data.module.name;
      return el.querySelector('button').onmousedown = () => {
        return openModule(node.data.module);
      };
    });
    return node.addControl(ctrl);
  },
  worker: moduleManager.workerModule.bind(moduleManager)
});

componentInput = new D3NE.Component('Input', {
  builder: function(node) {
    var ctrl, name, out;
    name = node.data.name || 'inp';
    out = new D3NE.Output('Number', numSocket);
    ctrl = _createFieldControl('text', name, 'name', 'type the name');
    return node.addOutput(out).addControl(ctrl);
  },
  worker: moduleManager.workerInputs.bind(moduleManager)
});

componentOutput = new D3NE.Component('Output', {
  builder: function(node) {
    var ctrl, inp, name;
    name = node.data.name || 'out';
    inp = new D3NE.Input('Number', numSocket);
    ctrl = _createFieldControl('text', name, 'name', 'type the name');
    return node.addInput(inp).addControl(ctrl);
  },
  worker: moduleManager.workerOutputs.bind(moduleManager)
});

componentNum = new D3NE.Component('Number', {
  builder: function(node) {
    var numControl, out1;
    out1 = new D3NE.Output('Number', numSocket);
    numControl = _createFieldControl('number', node.data.num, 'num');
    return node.addControl(numControl).addOutput(out1);
  },
  worker: function(node, inputs, outputs) {
    return outputs[0] = node.data.num;
  }
});

menu = new D3NE.ContextMenu({
  Nombre: componentNum,
  Fonctions: {
    Fonction: componentModule,
    Entrée: componentInput,
    Sortie: componentOutput
  },
  Opération: {
    Addition: componentAdd,
    Soustration: componentSous,
    Multiplication: componentMult,
    Division: componentDiv,
    Puissance: componentPow,
    Distance: componentDis
  },
  Comunication: {
    Message: componentMessage,
    'Message identique': componentMessageMatch,
    'Envoyer message': componentMessageSend
  },
  Evenement: {
    'Alerte': alertComp,
    'Entrée pressée': enterpressComp,
    'Touche enfoncée': keydownComp,
    Message: componentMessageEvent
  },
  Action: function() {
    alert('ok');
  }
});

components = [componentNum, componentAdd, componentSous, componentMult, componentDiv, componentPow, componentModule, componentInput, componentOutput, keydownComp, enterpressComp, alertComp, componentMessageEvent, componentMessageSend, componentMessageMatch, componentMessage];

container = document.querySelector('#d3ne');

editor = null;

header = document.querySelector('#moduleheader');

modulename = header.querySelector('input');

modulename.addEventListener('input', () => {
  return moduleStackEditor[moduleStackEditor.length - 1].module.name = modulename.value;
});

moduleStackEditor = [];

canSave = true;

saveModule = async function() {
  var data, module;
  ({module, data} = moduleStackEditor.pop());
  console.log("module", module, "data", data);
  module.data = editor.toJSON();
  await editor.fromJSON(data);
  editor.view.zoomAt(editor.nodes);
  if (moduleStackEditor.length === 0) {
    header.style.display = 'none';
  } else {
    modulename.value = moduleStackEditor[moduleStackEditor.length - 1].module.name;
  }
  editor.eventListener.trigger('change');
};

openModule = async function(m) {
  console.log(m);
  moduleStackEditor.push({
    data: editor.toJSON(),
    module: m
  });
  header.style.display = 'inline';
  modulename.value = m.name;
  await editor.fromJSON(m.data);
  editor.view.zoomAt(editor.nodes);
  return editor.eventListener.trigger('change');
};

editor = new D3NE.NodeEditor('demo@0.1.0', container, components, menu);

engine = new D3NE.Engine('demo@0.1.0', components);

moduleManager.setEngine(engine);

compile = async function() {
  var status;
  await engine.abort();
  status = (await engine.process(editor.toJSON()));
  return console.log(status);
};

$(function() {
  var load;
  load = function(file) {
    return $.getJSON(file, function(data) {
      console.log(data);
      return (async() => {
        await editor.fromJSON(data);
        editor.eventListener.on('change connectioncreate connectionremove nodecreate noderemove', (_, p) => {
          if (p) {
            return compile();
          }
        });
        editor.eventListener.on('error', (err) => {
          return alertify.error(err.message);
        });
        editor.view.zoomAt(editor.nodes);
        editor.view.resize();
        return editor.eventListener.trigger('change');
      })();
    });
  };
  $("#telegram").show();
  load("dataAi.json");
  $("#Op").on("click", function() {
    load("dataOp.json");
    return $("#telegram").hide();
  });
  $("#Ev").on("click", function() {
    load("dataEv.json");
    return $("#telegram").hide();
  });
  return $("#Ai").on("click", function() {
    load("dataAi.json");
    return $("#telegram").show();
  });
});
