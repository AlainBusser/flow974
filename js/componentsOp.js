// Generated by CoffeeScript 2.2.3
var componentAdd, componentDis, componentDiv, componentMult, componentPow, componentSous, getNode;

getNode = function(id) {
  return editor.nodes.find((n) => {
    return n.id === id;
  });
};

componentAdd = new D3NE.Component('Ajouter', {
  builder: function(node) {
    var inp1, inp2, numControl, out;
    inp1 = new D3NE.Input('Number', numSocket);
    inp2 = new D3NE.Input('Number', numSocket);
    out = new D3NE.Output('Number', numSocket);
    numControl = new D3NE.Control('<input readonly type="number">', (el, control) => {
      return control.setValue = (val) => {
        return el.value = val;
      };
    });
    return node.addInput(inp1).addInput(inp2).addControl(numControl).addOutput(out);
  },
  worker: function(node, inputs, outputs, module) {
    var node_temp, sum;
    sum = inputs[0][0] + inputs[1][0];
    if (!module) {
      node_temp = getNode(node.id);
      node_temp.controls[0].setValue(sum);
    }
    return outputs[0] = sum;
  }
});

componentSous = new D3NE.Component('Soustraire', {
  builder: function(node) {
    var inp1, inp2, numControl, out;
    inp1 = new D3NE.Input('Number', numSocket);
    inp2 = new D3NE.Input('Number', numSocket);
    out = new D3NE.Output('Number', numSocket);
    numControl = new D3NE.Control('<input readonly type="number">', (el, control) => {
      return control.setValue = (val) => {
        return el.value = val;
      };
    });
    return node.addInput(inp1).addInput(inp2).addControl(numControl).addOutput(out);
  },
  worker: function(node, inputs, outputs, module) {
    var node_temp, sous;
    sous = inputs[0][0] - inputs[1][0];
    if (!module) {
      node_temp = getNode(node.id);
      node_temp.controls[0].setValue(sous);
    }
    return outputs[0] = sous;
  }
});

componentMult = new D3NE.Component('Multiplier', {
  builder: function(node) {
    var inp1, inp2, numControl, out;
    inp1 = new D3NE.Input('Number', numSocket);
    inp2 = new D3NE.Input('Number', numSocket);
    out = new D3NE.Output('Number', numSocket);
    numControl = new D3NE.Control('<input readonly type="number">', (el, control) => {
      return control.setValue = (val) => {
        return el.value = val;
      };
    });
    return node.addInput(inp1).addInput(inp2).addControl(numControl).addOutput(out);
  },
  worker: function(node, inputs, outputs, module) {
    var mult, node_temp;
    mult = inputs[0][0] * inputs[1][0];
    if (!module) {
      node_temp = getNode(node.id);
      node_temp.controls[0].setValue(mult);
    }
    return outputs[0] = mult;
  }
});

componentDiv = new D3NE.Component('Diviser', {
  builder: function(node) {
    var inp1, inp2, numControl, out;
    inp1 = new D3NE.Input('Number', numSocket);
    inp2 = new D3NE.Input('Number', numSocket);
    out = new D3NE.Output('Number', numSocket);
    numControl = new D3NE.Control('<input readonly type="number">', (el, control) => {
      return control.setValue = (val) => {
        return el.value = val;
      };
    });
    return node.addInput(inp1).addInput(inp2).addControl(numControl).addOutput(out);
  },
  worker: function(node, inputs, outputs, module) {
    var div, node_temp;
    div = inputs[0][0] / inputs[1][0];
    if (!module) {
      node_temp = getNode(node.id);
      node_temp.controls[0].setValue(div);
    }
    return outputs[0] = div;
  }
});

componentPow = new D3NE.Component('Puissance', {
  builder: function(node) {
    var inp1, inp2, numControl, out;
    inp1 = new D3NE.Input('Number', numSocket);
    inp2 = new D3NE.Input('Number', numSocket);
    out = new D3NE.Output('Number', numSocket);
    numControl = new D3NE.Control('<input readonly type="number">', (el, control) => {
      return control.setValue = (val) => {
        return el.value = val;
      };
    });
    return node.addInput(inp1).addInput(inp2).addControl(numControl).addOutput(out);
  },
  worker: function(node, inputs, outputs, module) {
    var node_temp, pow;
    pow = Math.pow(inputs[0][0], inputs[1][0]);
    if (!module) {
      node_temp = getNode(node.id);
      node_temp.controls[0].setValue(pow);
    }
    return outputs[0] = pow;
  }
});

componentDis = new D3NE.Component('Distance', {
  builder: function(node) {
    var inp1, inp2, numControl, out;
    inp1 = new D3NE.Input('Number', numSocket);
    inp2 = new D3NE.Input('Number', numSocket);
    out = new D3NE.Output('Number', numSocket);
    numControl = new D3NE.Control('<input readonly type="number">', (el, control) => {
      return control.setValue = (val) => {
        return el.value = val;
      };
    });
    return node.addInput(inp1).addInput(inp2).addControl(numControl).addOutput(out);
  },
  worker: function(node, inputs, outputs, module) {
    var dis, node_temp;
    dis = Math.abs(inputs[0][0] - inputs[1][0]);
    if (!module) {
      node_temp = getNode(node.id);
      node_temp.controls[0].setValue(dis);
    }
    return outputs[0] = dis;
  }
});
