// Generated by CoffeeScript 2.3.0
var actionSocket, alertComp, dataSocket, enterpressComp, eventHandlers, keydownComp;

actionSocket = new D3NE.Socket('act', 'Action', 'hint');

dataSocket = new D3NE.Socket('data', 'Data', 'hint');

eventHandlers = {
  list: [],
  remove: function() {
    this.list.forEach((h) => {
      document.removeEventListener('keydown', h);
    });
    this.list = [];
  },
  add: function(name, h) {
    document.addEventListener(name, h, false);
    this.list.push(h);
  }
};

keydownComp = new D3NE.Component('Touche enfoncée', {
  builder: function(node) {
    return node.addOutput(new D3NE.Output('', actionSocket)).addOutput(new D3NE.Output('Code touche', dataSocket));
  },
  worker: function(node, inputs, outputs) {
    var task;
    task = new D3NE.Task(inputs, function(inps, data) {
      console.log('Keydown event', node.id, data);
      return [data];
    });
    eventHandlers.remove();
    eventHandlers.add('keydown', function(e) {
      task.run(e.keyCode);
      task.reset();
    });
    outputs[0] = task.option(0);
    outputs[1] = task.output(0);
  }
});

enterpressComp = new D3NE.Component('Entrée pressée', {
  builder: function(node) {
    return node.addInput(new D3NE.Input('', actionSocket)).addInput(new D3NE.Input('Code touche', dataSocket)).addOutput(new D3NE.Output('A1ors', actionSocket)).addOutput(new D3NE.Output('Sinon', actionSocket));
  },
  worker: function(node, inputs, outputs) {
    var task;
    task = new D3NE.Task(inputs, function(inps) {
      if (inps[0][0] === 13) {
        this.closed = [1];
      } else {
        this.closed = [0];
      }
      console.log('Print', node.id, inps);
    });
    outputs[0] = task.option(0);
    outputs[1] = task.option(1);
  }
});

alertComp = new D3NE.Component('Alerte', {
  builder: function(node) {
    var ctrl;
    ctrl = new D3NE.Control('<input type="text" value="Message...">', (el, c) => {
      var upd;
      upd = function() {
        c.putData('msg', el.value);
      };
      el.addEventListener('mousedown', function(e) {
        e.stopPropagation();
      });
      el.addEventListener('keydown', function(e) {
        e.stopPropagation();
      });
      el.value = c.getData('msg');
      el.addEventListener('change', upd);
      upd();
    });
    return node.addControl(ctrl).addInput(new D3NE.Input('', actionSocket));
  },
  worker: function(node, inputs, outputs) {
    var task;
    task = new D3NE.Task(inputs, function() {
      console.log('Alert', node.id, node.data);
      alert(node.data.msg);
    });
  }
});
